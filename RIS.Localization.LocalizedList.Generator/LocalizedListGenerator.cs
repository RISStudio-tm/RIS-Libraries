using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace RIS.Localization.LocalizedList.Generator
{
    [Generator]
    public class LocalizedListGenerator : ISourceGenerator
    {
        private const string LocalizedListBaseTypeNamespace = "RIS.Localization";
        private const string LocalizedListBaseTypeName = "LocalizedListBase";



        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() =>
                new LocalizedListSyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is not LocalizedListSyntaxReceiver receiver)
                return;
            if ((context.Compilation as CSharpCompilation)?.SyntaxTrees[0].Options is not CSharpParseOptions options)
                return;

            var compilation =
                context.Compilation;

            List<(INamedTypeSymbol, ClassDeclarationSyntax?)> namedTypeSymbols = new();

            foreach (var classDeclaration in receiver.CandidateClasses)
            {
                var model = compilation.GetSemanticModel(
                    classDeclaration.SyntaxTree);
                var namedTypeSymbol = model.GetDeclaredSymbol(
                    classDeclaration);

                if (namedTypeSymbol?.BaseType is null
                    || namedTypeSymbol.BaseType.Name != LocalizedListBaseTypeName
                    || namedTypeSymbol.BaseType.ContainingNamespace.ToString() != LocalizedListBaseTypeNamespace)
                {
                    continue;
                }

                namedTypeSymbols.Add((namedTypeSymbol!, classDeclaration));
            }

            foreach (var (namedSymbol, classDeclaration) in namedTypeSymbols)
            {
                var classSource = ProcessClass(
                    namedSymbol, context, classDeclaration!);

                if (classSource is null)
                    continue;

                context.AddSource($"{namedSymbol.ContainingNamespace}_{namedSymbol.Name}.g.cs",
                    SourceText.From(classSource, Encoding.UTF8));
            }
        }

        private static string? ProcessClass(INamedTypeSymbol classSymbol,
            GeneratorExecutionContext context, ClassDeclarationSyntax classDeclaration)
        {
            if (!context.ValidateClass(classSymbol, classDeclaration))
                return null;

            return GenerateClassSource(classSymbol);
        }

        private static string GenerateClassSource(INamedTypeSymbol classSymbol)
        {
            var classNameWithGenericTypes =
                $"{classSymbol.Name}{GetOpenGenericPart(classSymbol)}";

            StringBuilder source = new($@"// <auto-generated />

#pragma warning disable 1591

using System;
using System.ComponentModel;
using {LocalizedListBaseTypeNamespace};

namespace {classSymbol.ContainingNamespace.ToDisplayString()}
{{
    public partial class {classNameWithGenericTypes}
    {{
        {RoslynFactory.CreateEventStaticPropertyChanged()}
");

            source.Append($@"


        {RoslynFactory.CreateInstanceProperty(classSymbol)}
");

            source.Append(@"    }
}");

            return source.ToString();
        }

        private static string GetGenericPart(
            ImmutableArray<ITypeSymbol> typeArguments)
        {
            return string.Join(", ",
                typeArguments.Select(x => x.ToDisplayString()));
        }

        private static string? GetOpenGenericPart(
            INamedTypeSymbol classSymbol)
        {
            if (!classSymbol.TypeArguments.Any())
                return null;

            return $"<{GetGenericPart(classSymbol.TypeArguments)}>";
        }
    }
}
